// –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã —É–¥–∞–ª–µ–Ω—ã - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞—Ç—á–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –≤–º–µ—Å—Ç–æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö futures
use teloxide::{
    prelude::*,
    types::{
        InlineQueryResult, InlineQueryResultArticle, InputMessageContent, InputMessageContentText,
        ParseMode,
    },
};
use url::Url;

mod wikipedia;
use wikipedia::{
    clean_description, escape_markdown, escape_markdown_url, get_article_url,
    get_articles_batch_info, get_wikidata_descriptions_batch, search_wikipedia, truncate_string,
};

async fn inline_query_handler(bot: Bot, q: InlineQuery) -> ResponseResult<()> {
    let query = q.query.trim();

    if query.is_empty() {
        let results = vec![InlineQueryResult::Article(
            InlineQueryResultArticle::new(
                "help",
                "üîç –ü–æ–∏—Å–∫ –≤ –í–∏–∫–∏–ø–µ–¥–∏–∏",
                InputMessageContent::Text(InputMessageContentText::new(
                    "–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç–∞—Ç–µ–π –≤ —Ä—É—Å—Å–∫–æ–π –í–∏–∫–∏–ø–µ–¥–∏–∏",
                )),
            )
            .description("–ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞"),
        )];

        bot.answer_inline_query(q.id, results).await?;
        return Ok(());
    }

    match search_wikipedia(query).await {
        Ok(articles) => {
            // –°–æ–±–∏—Ä–∞–µ–º PageID –¥–ª—è –±–∞—Ç—á–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            let pageids: Vec<u64> = articles
                .iter()
                .filter_map(|article| article.pageid)
                .collect();

            if pageids.is_empty() {
                let no_results = vec![InlineQueryResult::Article(
                    InlineQueryResultArticle::new(
                        "no_results",
                        "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                        InputMessageContent::Text(InputMessageContentText::new(format!(
                            "–ü–æ –∑–∞–ø—Ä–æ—Å—É \"{query}\" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ä—É—Å—Å–∫–æ–π –í–∏–∫–∏–ø–µ–¥–∏–∏"
                        ))),
                    )
                    .description("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å"),
                )];
                bot.answer_inline_query(q.id, no_results).await?;
                return Ok(());
            }

            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–∏–º –±–∞—Ç—á–µ–≤—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
            let batch_info = match get_articles_batch_info(pageids).await {
                Ok(info) => info,
                Err(_) => {
                    let error_result = vec![InlineQueryResult::Article(
                        InlineQueryResultArticle::new(
                            "error",
                            "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö",
                            InputMessageContent::Text(InputMessageContentText::new(
                                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                            )),
                        )
                        .description("–í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞"),
                    )];
                    bot.answer_inline_query(q.id, error_result).await?;
                    return Ok(());
                }
            };

            // –°–æ–±–∏—Ä–∞–µ–º Wikidata ID –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏–π
            let wikidata_ids: Vec<String> = batch_info
                .values()
                .filter_map(|info| info.wikidata_id.clone())
                .collect();

            // –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏—è –∏–∑ Wikidata –±–∞—Ç—á–µ–º
            let wikidata_descriptions = get_wikidata_descriptions_batch(wikidata_ids)
                .await
                .unwrap_or_else(|_| std::collections::HashMap::new());

            let mut results = Vec::new();
            for (idx, article) in articles.into_iter().enumerate() {
                if let Some(pageid) = article.pageid {
                    let article_url = get_article_url(&article.title);
                    let info = batch_info.get(&pageid);

                    // –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    let image_url = info.and_then(|i| i.image_url.clone());

                    // –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: Wikidata -> extract -> snippet)
                    let description = if let Some(info) = info {
                        if let Some(wikidata_id) = &info.wikidata_id {
                            if let Some(wikidata_desc) = wikidata_descriptions.get(wikidata_id) {
                                clean_description(&truncate_string(wikidata_desc, 100))
                            } else if let Some(extract) = &info.extract {
                                clean_description(&truncate_string(extract, 100))
                            } else {
                                clean_description(&truncate_string(&article.snippet, 100))
                            }
                        } else if let Some(extract) = &info.extract {
                            clean_description(&truncate_string(extract, 100))
                        } else {
                            clean_description(&truncate_string(&article.snippet, 100))
                        }
                    } else {
                        clean_description(&truncate_string(&article.snippet, 100))
                    };

                    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
                    let content_text = if let Some(info) = info {
                        if let Some(extract) = &info.extract {
                            truncate_string(extract, 300)
                        } else {
                            truncate_string(&article.snippet, 200)
                        }
                    } else {
                        truncate_string(&article.snippet, 200)
                    };

                    let message_text = format!(
                        "üìñ *{}*\n\n{}\n\nüîó [–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é]({})",
                        escape_markdown(&article.title),
                        escape_markdown(&content_text),
                        escape_markdown_url(&article_url)
                    );

                    let mut article_result = InlineQueryResultArticle::new(
                        format!("article_{idx}"),
                        &article.title,
                        InputMessageContent::Text(
                            InputMessageContentText::new(message_text)
                                .parse_mode(ParseMode::MarkdownV2),
                        ),
                    )
                    .description(description);

                    if let Some(img_url) = image_url {
                        if let Ok(parsed_img_url) = Url::parse(&img_url) {
                            article_result = article_result.thumb_url(parsed_img_url);
                        }
                    }

                    results.push(InlineQueryResult::Article(article_result));
                }
            }

            if results.is_empty() {
                let no_results = vec![InlineQueryResult::Article(
                    InlineQueryResultArticle::new(
                        "no_results",
                        "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                        InputMessageContent::Text(InputMessageContentText::new(format!(
                            "–ü–æ –∑–∞–ø—Ä–æ—Å—É \"{query}\" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ä—É—Å—Å–∫–æ–π –í–∏–∫–∏–ø–µ–¥–∏–∏"
                        ))),
                    )
                    .description("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å"),
                )];
                bot.answer_inline_query(q.id, no_results).await?;
            } else {
                bot.answer_inline_query(q.id, results).await?;
            }
        }
        Err(_) => {
            let error_result = vec![InlineQueryResult::Article(
                InlineQueryResultArticle::new(
                    "error",
                    "–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞",
                    InputMessageContent::Text(InputMessageContentText::new(
                        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    )),
                )
                .description("–í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞"),
            )];
            bot.answer_inline_query(q.id, error_result).await?;
        }
    }

    Ok(())
}

async fn message_handler(bot: Bot, msg: Message) -> ResponseResult<()> {
    let Some(text) = msg.text() else {
        return Ok(());
    };

    if text == "/start" {
        bot.send_message(
            msg.chat.id,
            "üåç *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Wikipedia Search Bot\\!*\n\n\
             üìö –Ø –ø–æ–º–æ–≥—É –≤–∞–º –±—ã—Å—Ç—Ä–æ –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ä—É—Å—Å–∫–æ–π –í–∏–∫–∏–ø–µ–¥–∏–∏\\. \
             –ü—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω–ª–∞–π–Ω\\-–ø–æ–∏—Å–∫ –≤ –ª—é–±–æ–º —á–∞—Ç–µ –∏–ª–∏ –±–µ—Å–µ–¥–µ\\!\n\n\
             üîç **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**\n\
             –ù–∞–±–µ—Ä–∏—Ç–µ `@WikipediaArticlesBot –≤–∞—à –∑–∞–ø—Ä–æ—Å` –≤ –ª—é–±–æ–º —á–∞—Ç–µ\n\n\
             üí° **–ü—Ä–∏–º–µ—Ä—ã –ø–æ–∏—Å–∫–∞:**\n\
             ‚Ä¢ `@WikipediaArticlesBot –ü—É—à–∫–∏–Ω` ‚Äî –±–∏–æ–≥—Ä–∞—Ñ–∏—è –ø–æ—ç—Ç–∞\n\
             ‚Ä¢ `@WikipediaArticlesBot –∫–≤–∞–Ω—Ç–æ–≤–∞—è —Ñ–∏–∑–∏–∫–∞` ‚Äî –Ω–∞—É—á–Ω—ã–µ —Å—Ç–∞—Ç—å–∏\n\
             ‚Ä¢ `@WikipediaArticlesBot –ú–æ—Å–∫–≤–∞` ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–æ—Ä–æ–¥–µ\n\
             ‚Ä¢ `@WikipediaArticlesBot –∫–æ—Å–º–æ—Å` ‚Äî —Å—Ç–∞—Ç—å–∏ –æ –∫–æ—Å–º–æ—Å–µ\n\n\
             ‚ú® **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n\
             üìñ –ü–æ–ª–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏\n\
             üñºÔ∏è –ü—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ —Å—Ç–∞—Ç–µ–π\n\
             üîó –ü—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ Wikipedia\n\
             ‚ö° –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–π –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π\n\n\
             üöÄ *–ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å\\!*",
        )
        .parse_mode(ParseMode::MarkdownV2)
        .await?;
        return Ok(());
    }

    Ok(())
}

#[tokio::main]
async fn main() {
    // Load .env file if it exists (for development)
    dotenv::dotenv().ok();

    // Set log level to info
    std::env::set_var("RUST_LOG", "info");
    pretty_env_logger::init();

    let bot = Bot::from_env();

    let handler = dptree::entry()
        .branch(Update::filter_inline_query().endpoint(inline_query_handler))
        .branch(Update::filter_message().endpoint(message_handler));

    Dispatcher::builder(bot, handler)
        .enable_ctrlc_handler()
        .build()
        .dispatch()
        .await;
}
