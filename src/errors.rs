use thiserror::Error;

#[derive(Debug, Error)]
pub enum WikiError {
    #[error("–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: {0}")]
    Network(#[from] reqwest::Error),

    #[error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {0}")]
    Parse(#[from] serde_json::Error),

    #[error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ URL: {0}")]
    UrlParse(#[from] url::ParseError),

    #[error("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{query}'")]
    NoResults { query: String },

    #[error("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –∫–æ–¥ —è–∑—ã–∫–∞: '{code}'")]
    InvalidLanguage { code: String },

    #[error("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞")]
    Timeout,

    #[error("–û—Ç–≤–µ—Ç API —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É")]
    UnexpectedApiResponse,

    #[error("–û—à–∏–±–∫–∞ –∫—ç—à–∞: {message}")]
    Cache { message: String },

    #[error("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {message}")]
    Config { message: String },

    #[error("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {message}")]
    Internal { message: String },
}

impl WikiError {
    pub fn cache(message: impl Into<String>) -> Self {
        Self::Cache {
            message: message.into(),
        }
    }

    pub fn config(message: impl Into<String>) -> Self {
        Self::Config {
            message: message.into(),
        }
    }

    pub fn internal(message: impl Into<String>) -> Self {
        Self::Internal {
            message: message.into(),
        }
    }
}

pub type WikiResult<T> = Result<T, WikiError>;

pub trait UserFriendlyError {
    fn user_message(&self) -> String;
}

impl UserFriendlyError for WikiError {
    fn user_message(&self) -> String {
        match self {
            WikiError::Network(_) => "üîå –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.".to_string(),
            WikiError::Parse(_) => "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Wikipedia.".to_string(),
            WikiError::UrlParse(_) => "üîó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏.".to_string(),
            WikiError::NoResults { query } => {
                format!("üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É \"{}\" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", query)
            }
            WikiError::InvalidLanguage { code } => format!("üåç –Ø–∑—ã–∫ '{}' –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.", code),
            WikiError::Timeout => "‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.".to_string(),
            WikiError::UnexpectedApiResponse => {
                "üì° –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Wikipedia API.".to_string()
            }
            WikiError::Cache { .. } => "üíæ –ü—Ä–æ–±–ª–µ–º—ã —Å –∫—ç—à–µ–º –¥–∞–Ω–Ω—ã—Ö.".to_string(),
            WikiError::Config { .. } => "‚öôÔ∏è –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞.".to_string(),
            WikiError::Internal { .. } => {
                "üõ†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.".to_string()
            }
        }
    }
}
