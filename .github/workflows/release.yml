name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

# Добавляем права для GITHUB_TOKEN
permissions:
  contents: write
  discussions: write

jobs:
  build-release:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: wiki-article-finder-telegram
            asset_name: wiki-article-finder-telegram-linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: wiki-article-finder-telegram.exe
            asset_name: wiki-article-finder-telegram-windows-x86_64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: wiki-article-finder-telegram
            asset_name: wiki-article-finder-telegram-macos-x86_64

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libssl-dev pkg-config

    - name: Cache Cargo registry and git dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
        key: cargo-registry-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          cargo-registry-${{ runner.os }}-

    - name: Cache Cargo build for target
      uses: actions/cache@v4
      with:
        path: target/
        key: cargo-build-release-${{ runner.os }}-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('src/**/*.rs') }}
        restore-keys: |
          cargo-build-release-${{ runner.os }}-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}-
          cargo-build-release-${{ runner.os }}-${{ matrix.target }}-

    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Strip binary (Unix)
      if: matrix.os != 'windows-latest'
      run: strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

    - name: Rename binary to match asset name
      run: cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} ${{ matrix.asset_name }}
      shell: bash

    - name: Generate changelog (Linux only)
      if: matrix.os == 'ubuntu-latest'
      id: changelog
      run: |
        # Получаем предыдущий тег
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        CURRENT_TAG=${GITHUB_REF#refs/tags/}
        
        echo "## Changes in $CURRENT_TAG" > CHANGELOG.md
        echo "" >> CHANGELOG.md
        
        if [ -n "$PREV_TAG" ]; then
          echo "### Commits since $PREV_TAG:" >> CHANGELOG.md
          git log --pretty=format:"- %s (%h)" $PREV_TAG..HEAD >> CHANGELOG.md
        else
          echo "### Initial release" >> CHANGELOG.md
          git log --pretty=format:"- %s (%h)" >> CHANGELOG.md
        fi
        
        # Читаем changelog для использования в релизе
        CHANGELOG_CONTENT=$(cat CHANGELOG.md)
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG_CONTENT" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create GitHub Release and Upload Asset
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        body: ${{ matrix.os == 'ubuntu-latest' && steps.changelog.outputs.changelog || 'Release binaries for multiple platforms.' }}
        draft: false
        prerelease: false
        generate_release_notes: true
        files: ${{ matrix.asset_name }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}